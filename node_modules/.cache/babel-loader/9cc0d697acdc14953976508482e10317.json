{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ryanwerner/Projects/books_frontend/src/components/book.js\";\nimport React from 'react';\nimport { deleteBook } from '../actions/delete_book';\nimport { connect } from 'react-redux';\n\nconst Book = props => {\n  const markAsReadHandler = e => {\n    console.log(e.target.id);\n  };\n\n  const markAsReadingHandler = e => {\n    console.log(e.target.id);\n  };\n\n  const deleteHandler = e => {\n    fetch('http://localhost:3000/books/' + e.target.id, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json'\n      },\n      body: JSON.stringify({\n        id: e.target.id\n      })\n    }).then(resp => resp.json()).then;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [props.book.title, \" \", props.book.author]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), props.status === \"reading\" || props.status === \"to_read\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: markAsReadHandler,\n      id: props.book.id,\n      children: \"Mark as Read\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this) : null, props.status === \"to_read\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: markAsReadingHandler,\n      id: props.book.id,\n      children: \"Mark as Reading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteHandler,\n      id: props.book.id,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Book;\nexport default connect(null, {\n  deleteBook\n})(Book);\n\nvar _c;\n\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"sources":["/Users/ryanwerner/Projects/books_frontend/src/components/book.js"],"names":["React","deleteBook","connect","Book","props","markAsReadHandler","e","console","log","target","id","markAsReadingHandler","deleteHandler","fetch","method","headers","accept","body","JSON","stringify","then","resp","json","book","title","author","status"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AAClB,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,EAArB;AACH,GAFD;;AAIA,QAAMC,oBAAoB,GAAIL,CAAD,IAAO;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,EAArB;AACH,GAFD;;AAIA,QAAME,aAAa,GAAIN,CAAD,IAAO;AACzBO,IAAAA,KAAK,CAAC,iCAAiCP,CAAC,CAACG,MAAF,CAASC,EAA3C,EAA+C;AAChDI,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH,OAFuC;AAMhDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACT,QAAAA,EAAE,EAAEJ,CAAC,CAACG,MAAF,CAASC;AAAd,OAAf;AAN0C,KAA/C,CAAL,CAOGU,IAPH,CAOQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAPhB,EAQCF,IARD;AASH,GAVD;;AAYA,sBACI;AAAA,4BACI;AAAA,iBAAIhB,KAAK,CAACmB,IAAN,CAAWC,KAAf,OAAuBpB,KAAK,CAACmB,IAAN,CAAWE,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKrB,KAAK,CAACsB,MAAN,KAAiB,SAAjB,IAA8BtB,KAAK,CAACsB,MAAN,KAAiB,SAA/C,gBACG;AAAQ,MAAA,OAAO,EAAErB,iBAAjB;AAAoC,MAAA,EAAE,EAAED,KAAK,CAACmB,IAAN,CAAWb,EAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,GACkF,IAHvF,EAIKN,KAAK,CAACsB,MAAN,KAAiB,SAAjB,gBACG;AAAQ,MAAA,OAAO,EAAEf,oBAAjB;AAAuC,MAAA,EAAE,EAAEP,KAAK,CAACmB,IAAN,CAAWb,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,GACwF,IAL7F,eAMI;AAAQ,MAAA,OAAO,EAAEE,aAAjB;AAAgC,MAAA,EAAE,EAAER,KAAK,CAACmB,IAAN,CAAWb,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADJ;AAUH,CA/BD;;KAAMP,I;AAkCN,eAAeD,OAAO,CAAC,IAAD,EAAO;AAAED,EAAAA;AAAF,CAAP,CAAP,CAA8BE,IAA9B,CAAf","sourcesContent":["import React from 'react'\nimport { deleteBook } from '../actions/delete_book'\nimport { connect } from 'react-redux'\n\nconst Book = props => {\n    const markAsReadHandler = (e) => {\n        console.log(e.target.id)\n    }\n    \n    const markAsReadingHandler = (e) => {\n        console.log(e.target.id)\n    }\n\n    const deleteHandler = (e) => {\n        fetch('http://localhost:3000/books/' + e.target.id, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n                accept: 'application/json'\n            },\n            body: JSON.stringify({id: e.target.id})\n        }).then(resp => resp.json())\n        .then\n    }\n\n    return (\n        <>\n            <p>{props.book.title} {props.book.author}</p>\n            {props.status === \"reading\" || props.status === \"to_read\" ? \n                <button onClick={markAsReadHandler} id={props.book.id}>Mark as Read</button> : null}\n            {props.status === \"to_read\" ? \n                <button onClick={markAsReadingHandler} id={props.book.id}>Mark as Reading</button> : null}\n            <button onClick={deleteHandler} id={props.book.id}>Delete</button>\n        </>\n    )\n}\n\n\nexport default connect(null, { deleteBook })(Book)"]},"metadata":{},"sourceType":"module"}